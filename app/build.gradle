plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

// 读取version.properties
def versionProps = new Properties()
def versionPropsFile = rootProject.file('version.properties')
if (versionPropsFile.exists()) {
    versionProps.load(new FileInputStream(versionPropsFile))
}

android {
    namespace 'com.rookie.damaihelper'
    compileSdk 31

    defaultConfig {
        applicationId "com.rookie.damaihelper"
        minSdk 26
        targetSdk 31
        versionCode versionProps['versionCode'].toInteger()
        versionName versionProps['versionName']
    }

    //签名
    signingConfigs {
        myConfig {
            storeFile file("learnlaw.keystore")
            storePassword "135790"
            keyAlias "learnlaw"
            keyPassword "135790"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            debuggable false
            signingConfig signingConfigs.myConfig //签名
            minifyEnabled true //发布到市场需要混淆
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

task upgradeVersion {
    group 'help'
    description '构建新版本'
    doLast {
        println("---自动升级版本号---\n")
        def versionProp = new Properties()
        def versionFile = rootProject.file('version.properties')
        if (versionFile.exists()) {
            versionProp.load(new FileInputStream(versionPropsFile))
        }
        String oldVersionCode = versionProp['versionCode']
        String oldVersionName = versionProp['versionName']
        if (oldVersionCode == null || oldVersionName == null ||
                oldVersionCode.isEmpty() || oldVersionName.isEmpty()) {
            println("error:版本号不能为空")
            return;
        }
        versionProps['versionCode'] = String.valueOf(versionProps['versionCode'].toInteger() + 1)
        String str = versionProps['versionName'].toString()
        versionProps['versionName'] = str.substring(0, str.lastIndexOf('.') + 1) +
                (str.substring(str.lastIndexOf('.') + 1).toInteger() + 1)
        String tip =
                "版本号从$oldVersionName($oldVersionCode)升级到${versionProps['versionName']}(${versionProps['versionCode']})"
        println(tip)

        def writer = new FileWriter(versionPropsFile)
        versionProps.store(writer, null)
        writer.flush()
        writer.close()
        def tag = "v${versionProps['versionName']}"
        cmdExecute("git pull")
        cmdExecute("git add version.properties")
        cmdExecute("git commit -m \"版本号升级为：$tag\"")
        cmdExecute("git push origin")
        cmdExecute("git tag $tag")
        cmdExecute("git push origin $tag")
    }
}

void cmdExecute(String cmd) {
    println "\n执行$cmd"
    println cmd.execute().text
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'

    implementation "com.github.permissions-dispatcher:ktx:1.1.4"
}